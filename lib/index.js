'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _util = require('util');

var _rx = require('rx');

var _rx2 = _interopRequireDefault(_rx);

var _botkit = require('botkit');

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _conf = require('./conf');

var _conf2 = _interopRequireDefault(_conf);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _githubClient = require('./github-client');

var _githubClient2 = _interopRequireDefault(_githubClient);

var _frivolity = require('./frivolity');

var _frivolity2 = _interopRequireDefault(_frivolity);

var _githubHookListener = require('./github-hook-listener');

var _githubHookListener2 = _interopRequireDefault(_githubHookListener);

var _formatting = require('./formatting');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_conf2.default.logLevel > 5) _rx2.default.config.longStackSupport = true;
const Observable = _rx2.default.Observable;

const logger = (0, _logger2.default)(_conf2.default);
const github = (0, _githubClient2.default)(_extends({ logger }, _conf2.default));
const botController = (0, _botkit.slackbot)({ logger });
const githubHook = (0, _githubHookListener2.default)(_extends({ logger }, _conf2.default));

const bot = botController.spawn({
  token: _conf2.default.slackToken,
  incoming_webhook: {
    url: _conf2.default.slackWebhookUrl
  }
}).startRTM();

const dobbs = (0, _frivolity2.default)(_conf2.default, botController);

function allCiSucceeded(_ref) {
  let repository = _ref.repository;
  let sha = _ref.sha;
  let statuses = _ref.statuses;
  let contents = _ref.contents;

  let successes = statuses.filter(_ref2 => {
    let state = _ref2.state;
    return state === 'success';
  });
  return _conf2.default.ciProviders.every(_ref3 => {
    let name = _ref3.name;
    let configFile = _ref3.configFile;
    let statusContext = _ref3.statusContext;

    let isConfigured = contents.some(_ref4 => {
      let path = _ref4.path;
      return path === configFile;
    });
    let successFound = !isConfigured || successes.find(_ref5 => {
      let context = _ref5.context;
      return context === statusContext;
    });
    if (isConfigured && successFound) {
      logger.notice(`${ name } build success for ${ repository.name }#${ sha }, triggered by`, successFound);
    }
    return !!successFound;
  });
}

function getNpmStatus(packageName) {
  return Observable.fromPromise((0, _nodeFetch2.default)(_conf2.default.npmRegistry + packageName).then(res => res.json()).catch(() => false));
}

let successfulBuilds$ = githubHook.incoming.filter(_ref6 => {
  let event = _ref6.event;
  let data = _ref6.data;
  return event === 'status' && data.state === 'success';
}).do(_ref7 => {
  let data = _ref7.data;
  return logger.info('Received success notification', data);
}).map(_ref8 => {
  let data = _ref8.data;

  let getRepoData = github.forRepo(data.repository.name);
  return Observable.forkJoin(Observable.just(data), getRepoData('statuses', data.sha), getRepoData('contents', '/', data.sha), (_ref9, statuses, contents) => {
    let repository = _ref9.repository;
    let sha = _ref9.sha;
    return { repository, sha, statuses, contents };
  });
}).concatAll().filter(_ref10 => {
  let repository = _ref10.repository;
  let sha = _ref10.sha;
  let statuses = _ref10.statuses;
  let contents = _ref10.contents;

  logger.info('Received full status for', repository.name, sha);
  let hasPkg = contents.some(_ref11 => {
    let path = _ref11.path;
    return path === 'package.json';
  });
  return hasPkg && allCiSucceeded({ repository, sha, statuses, contents });
}).map(_ref12 => {
  let repository = _ref12.repository;
  let sha = _ref12.sha;
  return Observable.forkJoin(Observable.of({ repository, sha }), github.forRepo(repository.name)('tags'), (_ref13, tags) => {
    let repository = _ref13.repository;
    let sha = _ref13.sha;
    return {
      repository,
      sha,
      tag: tags.find(_ref14 => {
        let commit = _ref14.commit;
        return commit && commit.sha === sha;
      })
    };
  });
}).concatAll().filter(_ref15 => {
  let tag = _ref15.tag;
  return tag && _semver2.default.clean(tag.name);
});

successfulBuilds$.subscribe(_ref16 => {
  let repository = _ref16.repository;
  let sha = _ref16.sha;
  let tag = _ref16.tag;

  let name = repository.name;
  logger.notice('gonna notify CI success on tag', name, sha);
  bot.sendWebhook(_extends({
    channel: _conf2.default.statusChannel,
    attachments: [{
      color: _formatting.colors.success,
      fallback: `${ name } ${ tag.name } ready for publish.`,
      pretext: `npm package build success for \`${ name }\`!`,
      title: `${ tag.name } of the ${ name } package is ready to be ` + `published to NPM.`,
      text: `When publishing, be sure your local repository is at ` + `that exact version: \`git checkout ${ tag.name } && npm ` + `publish\`.`,
      fields: Object.keys(tag).map(k => {
        let stringValue = typeof tag[k] === 'string' ? tag[k] : JSON.stringify(tag[k]);
        return {
          title: k,
          value: stringValue,
          short: stringValue.length < 20
        };
      }),
      mrkdwn_in: ['pretext', 'text']
    }]
  }, _formatting.formats.success));
}, logger.error);

function getPackageStatus(packageName, branch) {
  let getRepoData = github.forRepo(packageName);
  return getRepoData('tags').map(tags => Observable.forkJoin(Observable.just(tags), getRepoData('contents', '/', branch), getRepoData('statuses', branch), getRepoData('commits'), getNpmStatus(packageName), (tags, contents, statuses, commits, npmInfo) => ({ tags, contents, statuses, commits, npmInfo }))).concatAll().map(data => _extends({
    latestGoodTag: data.tags.find(tag => allCiSucceeded({
      repository: { name: packageName },
      sha: tag.commit.sha,
      statuses: data.statuses.filter(_ref17 => {
        let url = _ref17.url;
        return ~url.indexOf(tag.commit.sha);
      }),
      contents: data.contents
    })),
    ciProvidersConfigured: _conf2.default.ciProviders.filter(_ref18 => {
      let configFile = _ref18.configFile;
      return data.contents.some(_ref19 => {
        let path = _ref19.path;
        return path === configFile;
      });
    })
  }, data));
}

dobbs.hears(['status ([A-Za-z0-9\-\.\_]+)(?: ([A-Za-z0-9\-\/\_]+))?'], ['direct_mention'], (dobbs, msg) => {
  let packageName = msg.match[1];
  let branch = msg.match[2] || 'master';
  logger.info('package status requested', packageName, msg);

  let packageStatus$ = getPackageStatus(packageName, branch);

  packageStatus$.subscribe(data => {
    let status = (0, _formatting.formatPackageStatus)(_extends({ packageName, branch }, data));
    dobbs.reply(msg, _extends({
      text: `Status for \`${ packageName }\``,
      attachments: [{
        color: status.good ? _formatting.colors.success : _formatting.colors.error,
        title: status.title || (status.good ? 'Good News!' : 'Keep Calm!'),
        text: status.text,
        fields: Object.keys(status.fields).map(k => ({
          title: k,
          value: status.fields[k],
          short: status.fields[k].length < 20
        })),
        mrkdwn_in: ['text', 'fields']
      }],
      mrkdwn_in: ['text', 'fields']
    }, _formatting.formats.standard));
  }, e => {
    logger.error('status check failed', e);
    let reply = _extends({}, _formatting.formats.error);
    if (e.statusCode === 404 && e.headers && e.headers.server === 'GitHub.com') {
      reply.text = `Could not find \`${ packageName }\` in the ` + `\`${ _conf2.default.githubOrg }\` GitHub organization. Is it private? _Does ` + `it even exist?_`;
    } else {
      reply.text = `Boy, I had a doozy of a time trying to do that. Here ` + `is the error.`;
      reply.attachments = [{
        color: _formatting.colors.error,
        title: e.message,
        text: '```\n' + (0, _util.inspect)(e) + '\n```'
      }];
    }
    dobbs.reply(msg, reply);
  });
});
//# sourceMappingURL=data:application/json;base64,